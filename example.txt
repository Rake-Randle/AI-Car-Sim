
1.  Empty Collections Initialization:
    nets: A list to hold neural networks corresponding to each genome.
    cars: A list to hold instances of the Car class that the neural networks control.
    
2.  Initializing PyGame and Display:
    The Pygame library is initialized, and a display window is created with the specified dimensions.

3.  Creating Neural Networks and Cars:
    For each genome passed into the run_simulation function:
    A neural network is created using the neat.nn.FeedForwardNetwork.create(g, config) method. The genome g and configuration config are used to create the network.
    The neural network is added to the nets list, and the genome's fitness is set to 0.
    A new instance of the Car class is created and added to the cars list.

4.  Clock and Font Settings:
    A PyGame clock is created to control the frame rate of the simulation.
    Different fonts are loaded for displaying information on the screen.

Updating the Generation Counter:

The current_generation global variable is incremented, indicating the current generation being simulated.
Main Simulation Loop:

The loop runs indefinitely, simulating the behavior of each car and updating the neural networks based on their actions.
Event Handling:

PyGame events are processed within the loop.
If the user closes the window or presses the escape key, the program exits.
Car Actions and Neural Network Activation:

For each car, the neural network is activated with the car's sensor data using nets[i].activate(car.get_data()).
The highest value in the output of the neural network determines the car's action: left, right, slow down, or speed up.
Updating Fitness and Car Movement:

For each alive car, the car's fitness is increased, and its position and movement are updated based on its action.
Checking Car Survival:

The number of cars that are still alive is counted.
If no cars are alive, the simulation loop is terminated.
Time Limit for Simulation:

A simple counter is used to roughly limit the duration of the simulation.
Drawing the Game Environment:

The game map is drawn on the screen.
For each alive car, its image is drawn on the screen.
Displaying Information:

Text information about the current generation, number of cars alive, and mean fitness is displayed on the screen.
Updating Display and Frame Rate:

The display is updated with the drawn elements.
The frame rate is controlled using the clock, ensuring a maximum of 60 frames per second.



The program main section
    The if __name__ == "__main__": block ensures that the code within it 
    only executes when the script is run directly (not when imported as a module).
    
    The config.txt file settings are loaded into the config variable using Config()
        neat.DefaultGenome
            Various options that control genome node activation, aggregation, bias, 
            compatibility, connection management, feed-forward architecture, response, 
            and weight settings.
            num_hidden, num_inputs, num_outputs: 
            Specifies the number of hidden, input, and output nodes, respectively.
            These parameters collectively define the structure and characteristics 
            of the neural networks represented by the genomes.
            
        neat.DefaultReproduction
            elitism: Specifies the number of elite genomes that are directly passed 
            to the next generation.
            survival_threshold: Sets the survival threshold, indicating the proportion 
            of genomes in each species that are considered for reproduction.
            
        neat.DefaultSpeciesSet
            compatibility_threshold: Specifies the compatibility threshold used for 
            determining species separation. Genomes with compatibility distance below 
            this threshold belong to the same species.
            
        neat.DefaultStagnation
            species_fitness_func: Defines the function to use when determining species 
            fitness. In this case, 'max' indicates that the maximum fitness of a 
            species is used.
            max_stagnation: Specifies the maximum number of generations a species 
            can remain stagnant before it's considered for stagnation and possible 
            extinction.
            species_elitism: Specifies the number of elite genomes from each species 
            that are preserved to the next generation.
            
        config_path
